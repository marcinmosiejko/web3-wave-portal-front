{"version":3,"sources":["helpers/main.js","App.js","index.js"],"names":["contractABI","abi","getEthereumObject","window","ethereum","findMetaMaskAccount","a","console","error","log","request","method","accounts","length","account","connectWallet","handleSetCurrentAccount","alert","readWaveCount","handleSetWaveCount","provider","ethers","providers","Web3Provider","wavePortalContract","Contract","getTotalWaves","count","toNumber","wave","handleSetTxn","handleSetIsMining","signer","getSigner","waveTxn","hash","wait","App","useState","currentAccount","setCurrentAccount","waveCount","setWaveCount","txn","setTxn","isMining","setIsMining","useEffect","className","SpinnerCircular","color","size","join","onClick","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0f5164cb.chunk.js","sourcesContent":["import { ethers } from 'ethers';\nimport abi from 'utils/WavePortal.json';\n\nconst contractAddress = '0xe8Fd7649A388151390Aee797FA56428925fF98da';\nconst contractABI = abi.abi;\n\nconst getEthereumObject = () => window.ethereum;\n\n// This function returns the first linked account found.\n// If there is no account linked, it will return null.\nexport const findMetaMaskAccount = async () => {\n  try {\n    const ethereum = getEthereumObject();\n\n    // First make sure we have access to the Ethereum object\n    if (!ethereum) {\n      console.error('Make sure you have Metamask!');\n      return null;\n    }\n\n    console.log('We have the Ethereum object', ethereum);\n    const accounts = await ethereum.request({ method: 'eth_accounts' });\n\n    if (accounts.length !== 0) {\n      const account = accounts[0];\n      console.log('Found an authorized account:', account);\n      return account;\n    } else {\n      console.error('No authorized account found');\n      return null;\n    }\n  } catch (error) {\n    console.error(error);\n    return null;\n  }\n};\n\nexport const connectWallet = async (handleSetCurrentAccount) => {\n  try {\n    const ethereum = getEthereumObject();\n    if (!ethereum) {\n      alert('Get MetaMask!');\n      return;\n    }\n\n    // Requests Metamask to give access to the user's wallet\n    const accounts = await ethereum.request({\n      method: 'eth_requestAccounts',\n    });\n\n    console.log('Connected', accounts[0]);\n    handleSetCurrentAccount(accounts[0]);\n  } catch (error) {\n    console.error(error);\n  }\n};\n\nexport const readWaveCount = async (handleSetWaveCount) => {\n  try {\n    const { ethereum } = window;\n\n    if (ethereum) {\n      const provider = new ethers.providers.Web3Provider(ethereum);\n      const wavePortalContract = new ethers.Contract(\n        contractAddress,\n        contractABI,\n        provider\n      );\n\n      // Read from contract\n      let count = await wavePortalContract.getTotalWaves();\n      handleSetWaveCount(count.toNumber());\n    }\n  } catch (err) {}\n};\n\nexport const wave = async (\n  handleSetWaveCount,\n  handleSetTxn,\n  handleSetIsMining\n) => {\n  try {\n    const { ethereum } = window;\n\n    if (ethereum) {\n      const provider = new ethers.providers.Web3Provider(ethereum);\n      const signer = provider.getSigner();\n      const wavePortalContract = new ethers.Contract(\n        contractAddress,\n        contractABI,\n        signer\n      );\n\n      // Execute the actual wave from smart contract and get transaction hash\n      const waveTxn = await wavePortalContract.wave();\n      handleSetTxn(waveTxn.hash);\n      handleSetIsMining(true);\n\n      // Wait for the transaction to get mined\n      await waveTxn.wait();\n      handleSetIsMining(false);\n\n      // Read from contract again to update displayed waveCount\n      const count = await wavePortalContract.getTotalWaves();\n      handleSetWaveCount(count.toNumber());\n    } else {\n      console.log(\"Ethereum object doesn't exist!\");\n    }\n  } catch (error) {\n    console.log(error);\n  }\n};\n","import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport {\n  findMetaMaskAccount,\n  connectWallet,\n  wave,\n  readWaveCount,\n} from 'helpers/main';\nimport { SpinnerCircular } from 'spinners-react';\n\nconst App = () => {\n  const [currentAccount, setCurrentAccount] = useState('');\n  const [waveCount, setWaveCount] = useState('');\n  const [txn, setTxn] = useState('');\n  const [isMining, setIsMining] = useState(false);\n\n  const handleSetCurrentAccount = (account) => {\n    setCurrentAccount(account);\n  };\n\n  const handleSetWaveCount = (count) => {\n    setWaveCount(count);\n  };\n\n  const handleSetTxn = (txn) => {\n    setTxn(txn);\n  };\n\n  const handleSetIsMining = (isMining) => {\n    setIsMining(isMining);\n  };\n\n  useEffect(() => {\n    (async () => {\n      const account = await findMetaMaskAccount();\n      if (account !== null) {\n        setCurrentAccount(account);\n      }\n      readWaveCount(handleSetWaveCount);\n    })();\n  }, []);\n\n  return (\n    <div className=\"mainContainer\">\n      <div className=\"dataContainer\">\n        <div className=\"header\">GM ðŸ‘‹</div>\n\n        <div className=\"bio\">\n          <p>\n            My name's Marcin. I'm a video editor working towards becoming web3\n            developer ;)\n          </p>\n          <p> Connect your Ethereum wallet and wave at me!</p>\n        </div>\n\n        <div className=\"totalWavesContainer\">\n          {waveCount ? (\n            <>\n              <span className=\"description\">Total waves:</span>\n              {isMining ? (\n                <SpinnerCircular color=\"#48dcb0\" size={48} />\n              ) : (\n                <span className=\"wavesValue\">{waveCount}</span>\n              )}\n            </>\n          ) : null}\n        </div>\n\n        {currentAccount ? (\n          <button\n            className={['button', 'waveButton'].join(' ')}\n            onClick={() =>\n              wave(handleSetWaveCount, handleSetTxn, handleSetIsMining)\n            }\n          >\n            Wave at Me\n          </button>\n        ) : (\n          <button\n            className={['button', 'connectWalletButton'].join(' ')}\n            onClick={() => connectWallet(handleSetCurrentAccount)}\n          >\n            Connect Wallet\n          </button>\n        )}\n\n        <div className=\"txnContainer\">\n          {txn ? (\n            <>\n              <span className=\"description\">Your transaction hash:</span>\n              <span className=\"txnValue\"> {txn}</span>\n            </>\n          ) : null}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}